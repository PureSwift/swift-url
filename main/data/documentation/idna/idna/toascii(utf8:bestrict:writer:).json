{"kind":"symbol","seeAlsoSections":[{"generated":true,"title":"IDNA Compatibility Processing","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/IDNA","doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/idna\/idna\/toascii(utf8:bestrict:writer:)"]}],"metadata":{"modules":[{"name":"IDNA"}],"role":"symbol","symbolKind":"method","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toASCII","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"utf8","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"beStrict","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"writer","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"title":"toASCII(utf8:beStrict:writer:)","extendedModule":"IDNA","externalID":"s:4IDNAAAO7toASCII4utf88beStrict6writerSbx_Sbys5UInt8VXEtSlRzAH7ElementRtzlFZ","roleHeading":"Type Method"},"identifier":{"url":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)","interfaceLanguage":"swift"},"abstract":[{"text":"Converts a domain to its canonical ASCII form.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toASCII"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":" "},{"kind":"internalParam","text":"source"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"beStrict"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":" = false, "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"}]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":"Whether or not the operation was successful."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", the given domain is not valid, and any data previously yielded to "},{"type":"codeVoice","code":"writer"},{"type":"text","text":" "},{"type":"text","text":"should be discarded."}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A domain in either Unicode or ASCII form, expressed as a Collection of UTF-8 code-units."}]}],"name":"utf8"},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"true","type":"codeVoice"},{"type":"text","text":", limits allowed domain names as described by STD3\/RFC-1122 - i.e. ASCII letters, digits,"},{"type":"text","text":" "},{"type":"text","text":"and hyphens only (LHD). URLs do not assume STD3 name restrictions apply, and have a"},{"type":"text","text":" "},{"type":"text","text":"less restrictive set of disallowed characters based on URL syntax requirements"},{"type":"text","text":" "},{"type":"text","text":"(for example, they allow underscores, such as in "},{"code":"\"http:\/\/some_hostname\/\"","type":"codeVoice"},{"type":"text","text":", whereas STD3 does not)."},{"type":"text","text":" "},{"type":"text","text":"The default is "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"beStrict"},{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure which receives the ASCII bytes emitted by this function.","type":"text"}]}],"name":"writer"}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The domain may be given in ASCII or Unicode form. This function will perform all required","type":"text"},{"text":" ","type":"text"},{"text":"compatibility processing, including mapping and case-folding, normalization, Punycode decoding, etc.","type":"text"},{"text":" ","type":"text"},{"text":"Finally, each label and the entire domain are validated, and the result is encoded as ASCII using","type":"text"},{"text":" ","type":"text"},{"text":"the Punycode encoding.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is idempotent, so if it is applied to a domain that is already in canonical ASCII form,"},{"type":"text","text":" "},{"type":"text","text":"it just produces the same value, unchanged."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ASCII domains.","toASCII(\"example.com\")  \/\/ ‚úÖ \"example.com\"","","\/\/ Unicode.","toASCII(\"we‚ù§Ô∏èswift\")        \/\/ ‚úÖ \"xn--weswift-z98d\"","toASCII(\"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\")  \/\/ ‚úÖ \"api.xn--6qqa088eba.com\"","","\/\/ Idempotent.","toASCII(\"api.xn--6qqa088eba.com\") \/\/ ‚úÖ \"api.xn--6qqa088eba.com\"","","\/\/ Normalizes Unicode domains.","toASCII(\"caf\\u{00E9}.fr\")   \/\/ ‚úÖ \"xn--caf-dma.fr\"","toASCII(\"cafe\\u{0301}.fr\")  \/\/ ‚úÖ \"xn--caf-dma.fr\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validation ensures that domains are NFC normalized and case-folded, and enforces some rules"},{"type":"text","text":" "},{"type":"text","text":"with regards to use of joiners and bidirectional text."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Zero-width joiners and non-joiners are only allowed in certain contexts.","let notApple = \"a\\u{200C}pple.com\"     \/\/ ü•∏ Hey! There's a zero-width non-joiner hiding there!","print(notApple)           \"a‚Äåpple.com\"  \/\/ To a human, it looks like \"apple.com\"","print(notApple == \"apple.com\")  false  \/\/ A computer knows it ISN'T \"apple.com\"","toASCII(\"a\\u{200C}pple.com\")    <nil>  \/\/ ‚ùé Not a valid IDN!","","\/\/ \"xn--cafe-yvc\" is how you would Punycode \"cafe\\u{0301}\" (the non-NFC \"caf√©\").","\/\/ This ensures there is only one \"caf√©.fr\".","toASCII(\"xn--caf-dma.fr\")   \/\/ ‚úÖ \"xn--caf-dma.fr\" - valid IDN","toASCII(\"xn--cafe-yvc.fr\")  \/\/ ‚ùé <nil> - Not a valid IDN!"]},{"type":"heading","anchor":"Rendering-Domains","level":2,"text":"Rendering Domains"},{"type":"paragraph","inlineContent":[{"text":"Although the ASCII representation is less commonly used to render a domain,","type":"text"},{"text":" ","type":"text"},{"text":"it is still worth considering carefully whether it is an appropriate presentation for the context:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In particular, note that in situations such as ","type":"text"},{"type":"codeVoice","code":"\"Â≤çÂ≤äÂ≤äÂ≤ÖÂ≤âÂ≤é.com\""},{"text":" (or ","type":"text"},{"type":"codeVoice","code":"\"xn--citibank.com\""},{"text":"),","type":"text"},{"text":" ","type":"text"},{"text":"the ASCII representation may do more to mislead than the Unicode representation. For more information","type":"text"},{"text":" ","type":"text"},{"text":"about rendering domains for display, see ","type":"text"},{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function emits the ASCII bytes of the result using a callback closure. To construct the full domain,"},{"type":"text","text":" "},{"type":"text","text":"the bytes can be written to a buffer or appended to a string as individual scalars."}]},{"syntax":"swift","type":"codeListing","code":["func idna_encode(_ input: String) -> String? {","  var buffer = [UInt8]()","  let success = IDNA.toASCII(utf8: input.utf8) { ascii in","    buffer.append(ascii)","  }","  return success ? String(decoding: buffer, as: UTF8.self) : nil","}","","idna_encode(\"x.example.com\")","\/\/ ‚úÖ \"x.example.com\" (ASCII)","","idna_encode(\"shop.ÿ£ŸáŸÑÿß.com\")","\/\/ ‚úÖ \"shop.xn--igbi0gl.com\""]},{"type":"paragraph","inlineContent":[{"text":"If an error occurs, the function will stop processing the domain and return ","type":"text"},{"code":"false","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and any previously-written data should be discarded.","type":"text"}]},{"type":"heading","anchor":"UTS46-Parameters","level":3,"text":"UTS46 Parameters"},{"type":"paragraph","inlineContent":[{"text":"This function implements ","type":"text"},{"code":"\"domain to ASCII\"","type":"codeVoice"},{"text":" as defined by the ","type":"text"},{"identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-ascii","type":"reference","isActive":true},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"It is the same as the ","type":"text"},{"code":"ToASCII","type":"codeVoice"},{"text":" function defined by ","type":"text"},{"identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToASCII","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with parameters bound as follows:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"CheckHyphens","type":"codeVoice"},{"type":"text","text":" is "},{"code":"false","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CheckBidi"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"}]}]},{"content":[{"inlineContent":[{"code":"CheckJoiners","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"true","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UseSTD3ASCIIRules"},{"type":"text","text":" is given by the parameter "},{"type":"codeVoice","code":"beStrict"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Transitional_Processing","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Additionally, for this implementation, ","type":"text"},{"code":"VerifyDnsLength","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"URLs do not enforce DNS length limits, so it is not necessary for users of this API who wish to process","type":"text"},{"text":" ","type":"text"},{"text":"domains as URLs do.","type":"text"}]}]}],"references":{"https://www.unicode.org/reports/tr46/#ToASCII":{"title":"Unicode Technical Standard #46","type":"link","identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToASCII","titleInlineContent":[{"text":"Unicode Technical Standard #46","type":"text"}],"url":"https:\/\/www.unicode.org\/reports\/tr46\/#ToASCII"},"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toASCII(utf8:beStrict:writer:)":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toASCII","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"beStrict"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"abstract":[{"text":"Converts a domain to its canonical ASCII form.","type":"text"}],"url":"\/documentation\/idna\/idna\/toascii(utf8:bestrict:writer:)","title":"toASCII(utf8:beStrict:writer:)"},"https://url.spec.whatwg.org/#concept-domain-to-ascii":{"title":"WHATWG URL Standard","type":"link","identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-ascii","titleInlineContent":[{"text":"WHATWG URL Standard","type":"text"}],"url":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-ascii"},"doc://com.karwa.WebURL/documentation/IDNA/IDNA":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA","navigatorTitle":[{"kind":"identifier","text":"IDNA"}],"url":"\/documentation\/idna\/idna","title":"IDNA","abstract":[{"text":"Functions relating to Internationalizing Domain Names for Applications (IDNA) compatibility processing.","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IDNA"}]},"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toUnicode(utf8:writer:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)","url":"\/documentation\/idna\/idna\/tounicode(utf8:writer:)","title":"toUnicode(utf8:writer:)","abstract":[{"text":"Converts a domain to its canonical Unicode form.","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toUnicode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:s25AnyRandomAccessCollectionV","kind":"typeIdentifier","text":"AnyRandomAccessCollection"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s7UnicodeO","kind":"typeIdentifier","text":"Unicode"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s7UnicodeO6ScalarV","kind":"typeIdentifier","text":"Scalar"},{"kind":"text","text":">, "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}]},"doc://com.karwa.WebURL/documentation/IDNA":{"title":"IDNA","type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA","abstract":[],"url":"\/documentation\/idna"}}}