{"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures"]]},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"SegmentedLine"},{"type":"text","text":" is a one-dimensional space, where every location is assigned a value."}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/com.karwa.WebURL\/s23CustomStringConvertibleP","doc:\/\/com.karwa.WebURL\/SQ"]}],"sections":[],"metadata":{"modules":[{"name":"UnicodeDataStructures"}],"title":"SegmentedLine","roleHeading":"Structure","symbolKind":"struct","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SegmentedLine"}],"externalID":"s:21UnicodeDataStructures13SegmentedLineV","navigatorTitle":[{"kind":"identifier","text":"SegmentedLine"}]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Comparable","kind":"typeIdentifier","preciseIdentifier":"s:SL"}]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"SegmentedLine"},{"text":" is effective when entire regions are assigned the same value.","type":"text"},{"text":" ","type":"text"},{"text":"For example, we can build a simple number line to tag ranges of integers; in this case,","type":"text"},{"text":" ","type":"text"},{"text":"we’re tagging each range with an optional string.","type":"text"}],"type":"paragraph"},{"code":["var line = SegmentedLine<Int, String?>(bounds: 0..<100, value: nil)","","\/\/ After setting values <5 to \"small\" and values >10 to \"large\",","\/\/ the gap is left with its previous value, \"medium\".","","line.set(0..<20,  to: \"medium\")","line.set(0..<5,   to: \"small\")","line.set(10..<60, to: \"large\")","print(line)","\/\/ | [0..<5]: \"small\" | [5..<10]: \"medium\" | [10..<60]: \"large\" | [60..<100]: nil |"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The locations on a "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" do not have to be integers - they can be any "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"including dates, strings, Unicode scalars (for building character sets), or "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" indexes."}],"type":"paragraph"},{"inlineContent":[{"text":"In the latter case, we can model a Collection’s elements as a line from its ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"text":" to its ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"allowing us to annotate regions of any Collection. In a way, it can be used as a generalized ","type":"text"},{"code":"AttributedString","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["let string = \"Bob is feeling great\"","","\/\/ Create a SegmentedLine for the collection's contents.","\/\/ Start by setting a font attribute over the entire string.","","var tags = SegmentedLine(","  bounds: string.startIndex..<string.endIndex,","  value: [Font.custom(\"Comic Sans\")] as [Any]",")","","\/\/ Set each word to a different color.","\/\/ Use 'modify' to append the attribute, but only for the region","\/\/ we're modifying.","","for word: Substring in string.split(separator: \" \") {","  tags.modify(word.startIndex..<word.endIndex) { attributes in","    attributes.append(Color.random())","  }","}","","\/\/ Check the result.","\/\/ - ✅ Every segment still contains the font attribute.","\/\/ - ✅ Each word also contains its individual color attribute.","","for (range, attributes) in tags.segments {","  print(#\"\"\\#(string[range])\"\"#, \"-\", attributes)","}","","\/\/ \"Bob\"     [Font.custom(\"Comic Sans\"), Color.orange]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"is\"      [Font.custom(\"Comic Sans\"), Color.green]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"feeling\" [Font.custom(\"Comic Sans\"), Color.pink]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"great\"   [Font.custom(\"Comic Sans\"), Color.yellow]"],"type":"codeListing","syntax":"swift"}]}],"topicSections":[{"title":"Structures","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct"]},{"title":"Initializers","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/init(bounds:value:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/bounds","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/segments-swift.property"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/modify(_:_:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/set(_:to:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/CustomStringConvertible-Implementations","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Equatable-Implementations"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"},"variants":[{"paths":["\/documentation\/unicodedatastructures\/segmentedline"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"kind":"symbol","url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()","title":"combineSegments()","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","role":"symbol","abstract":[{"text":"Merges segments of consecutive equal elements.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"kind":"text","text":"()"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/segments-swift.property":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"abstract":[{"text":"The assigned regions of the space.","type":"text"}],"title":"segments","type":"topic","kind":"symbol","url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"segments","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/segments-swift.property"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/CustomStringConvertible-Implementations":{"url":"\/documentation\/unicodedatastructures\/segmentedline\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/CustomStringConvertible-Implementations","role":"collectionGroup","type":"topic","abstract":[],"kind":"article"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/bounds":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/bounds","title":"bounds","abstract":[{"text":"The bounds of this space.","type":"text"}],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"bounds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","url":"\/documentation\/unicodedatastructures\/segmentedline\/bounds","role":"symbol"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"role":"collection","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","title":"UnicodeDataStructures","url":"\/documentation\/unicodedatastructures","type":"topic","kind":"symbol","abstract":[]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments(while:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"("},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","text":"Segments"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","text":"Segments"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)","title":"combineSegments(while:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"type":"topic","abstract":[{"text":"Merges segments according to the given closure.","type":"text"}],"kind":"symbol"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"kind":"symbol","url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)","title":"mapValues(_:)","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","role":"symbol","abstract":[{"text":"Returns a new ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"mapValues","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/modify(_:_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"modify","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":">, (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/modify(_:_:)","title":"modify(_:_:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/modify(_:_:)","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","abstract":[{"text":"Modifies the values assigned to the given region.","type":"text"}],"kind":"symbol"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"type":"topic","url":"\/documentation\/unicodedatastructures\/segmentedline","role":"symbol","navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","kind":"symbol","title":"SegmentedLine","abstract":[{"text":"A ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":" is a one-dimensional space, where every location is assigned a value.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Segments-swift.struct":{"type":"topic","url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct","role":"symbol","navigatorTitle":[{"text":"Segments","kind":"identifier"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct","kind":"symbol","title":"SegmentedLine.Segments","abstract":[],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Segments","kind":"identifier"}]},"doc://com.karwa.WebURL/s23CustomStringConvertibleP":{"identifier":"doc:\/\/com.karwa.WebURL\/s23CustomStringConvertibleP","type":"unresolvable","title":"Swift.CustomStringConvertible"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Equatable-Implementations":{"role":"collectionGroup","abstract":[],"kind":"article","title":"Equatable Implementations","url":"\/documentation\/unicodedatastructures\/segmentedline\/equatable-implementations","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Equatable-Implementations","type":"topic"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/init(bounds:value:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/init(bounds:value:)","title":"init(bounds:value:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"bounds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"abstract":[{"text":"Creates a new space with the given bounds and value.","type":"text"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/init(bounds:value:)"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/set(_:to:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/set(_:to:)","title":"set(_:to:)","abstract":[{"text":"Assigns a single value to all locations in the given region.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"set","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Range","preciseIdentifier":"s:Sn","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","url":"\/documentation\/unicodedatastructures\/segmentedline\/set(_:to:)","role":"symbol"},"doc://com.karwa.WebURL/SQ":{"identifier":"doc:\/\/com.karwa.WebURL\/SQ","type":"unresolvable","title":"Swift.Equatable"}}}